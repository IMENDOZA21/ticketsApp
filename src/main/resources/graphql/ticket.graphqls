scalar DateTime

type Ticket {
    id: ID! # Identificador Ãºnico del ticket
    user: String # Nombre del usuario asociado al ticket
    status: Boolean # Estado actual del ticket (true para abierto, false para cerrado)
    createdAt: DateTime # Fecha de creacion del ticket
    updatedAt: DateTime # Fecha de actualizacion del ticket
}

type Query {
    findAllTickets: [Ticket]! # Obtener todos los tickets
    findAllTicketsPaged(page: Int, size: Int): [Ticket]! # Obtener todos los tickets paginados
    findById(id: ID!): Ticket # Buscar un ticket por su ID
    findAllByStatus(status: Boolean): [Ticket]! # Obtener todos los tickets filtrados por estado
    findAllByStatusPaged(status: Boolean, page: Int, size: Int): [Ticket]! # Obtener todos los tickets filtrados por estado paginados
    findAllByUser(user: String): [Ticket]! # Obtener todos los tickets asociados a un usuario
    findAllByUserPaged(user: String, page: Int, size: Int): [Ticket]! # Obtener todos los tickets asociados a un usuario paginados
    findByRangoFechas(fechaInicio: String, fechaFin: String, page: Int, size: Int): [Ticket]! # Obtener todos los tickets creados en un rango de fechas
}

type Mutation {
    createTicket(user: String, status: Boolean): Ticket! # Crear un nuevo ticket
    updateTicket(id: ID!, user: String, status: Boolean): Ticket! # Actualizar un ticket existente
    deleteTicket(id: ID!): Boolean # Eliminar un ticket por su ID
}


